import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Flutter App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BluetoothConnection? connection;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: <Widget>[
          Image.asset(
            "assets/white.jpeg",
            width: double.infinity,
            height: double.infinity,
            fit: BoxFit.cover,
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Image.asset(
                  "assets/ham.png",
                  width: 200,
                  height: 200,
                ),
                ElevatedButton(
                  onPressed: _connect,
                  child: Text('Find Device'),
                )
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _connect() async {
    BluetoothDevice? selectedDevice = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => DeviceListPage()),
    );

    if (selectedDevice != null) {
      try {
        connection = await BluetoothConnection.toAddress(selectedDevice.address);
        print('Connected to ${selectedDevice.name}');

        if (connection != null) {
          final enteredName = await Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => EnterNameScreen()),
          );

          if (enteredName != null) {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => CheckScreen(connection: connection!, userName: enteredName)),
            );
          }
        }

      } catch (e) {
        print('Error connecting: $e');
      }
    }
  }
}

class DeviceListPage extends StatelessWidget {
  Future<List<BluetoothDevice>> _getBondedDevices() async {
    List<BluetoothDevice> devices = [];
    try {
      devices = await FlutterBluetoothSerial.instance.getBondedDevices();
    } catch (e) {
      print('Error getting bonded devices: $e');
    }
    return devices;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Select Device'),
      ),
      body: FutureBuilder<List<BluetoothDevice>>(
        future: _getBondedDevices(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(child: Text('No bonded devices found.'));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                BluetoothDevice device = snapshot.data![index];
                return ListTile(
                  title: Text(device.name ?? 'Unknown Name'),
                  subtitle: Text(device.address ?? 'Unknown Address'),
                  onTap: () {
                    Navigator.pop(context, device);
                  },
                );
              },
            );
          }
        },
      ),
    );
  }
}

class EnterNameScreen extends StatefulWidget {
  @override
  _EnterNameScreenState createState() => _EnterNameScreenState();
}

class _EnterNameScreenState extends State<EnterNameScreen> {
  final TextEditingController _nameController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Enter Your Name')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: _nameController,
              maxLength: 15,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            ElevatedButton(
              onPressed: () {
                final enteredName = _nameController.text.trim();
                if (enteredName.length >= 2) {
                  Navigator.pop(context, enteredName);
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Name should be at least 2 characters long')),
                  );
                }
              },
              child: Text('Save Name'),
            ),
          ],
        ),
      ),
    );
  }
}

class CheckScreen extends StatefulWidget {
  final BluetoothConnection connection;
  final String userName;

  CheckScreen({required this.connection, required this.userName});

  @override
  _CheckScreenState createState() => _CheckScreenState();
}

class _CheckScreenState extends State<CheckScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hello, ${widget.userName}'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _startGame,
              child: Text('Start Game'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _showSettings(context),
              child: Text('Settings'),
            ),
          ],
        ),
      ),
    );
  }

  void _startGame() {
    if (widget.connection.isConnected) {
      Uint8List data = Uint8List.fromList(utf8.encode('start_game'));
      widget.connection.output.add(data);
      widget.connection.output.allSent.then((_) {
        print('start_game');
      });
    } else {
      print('Not connected');
    }
  }

  void _showSettings(BuildContext context) {
    bool isSlowMode = false;
    bool is3light = false;
    String? selectedSoundSet = 'sound_set_1'; // Default value
    String? selectedColorSet = 'color_set_1'; // Default value

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Settings'),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  SwitchListTile(
                    title: Text('Slow Mode'),
                    value: isSlowMode,
                    onChanged: (bool value) {
                      setState(() {
                        isSlowMode = value;
                      });
                    },
                  ),
                  SwitchListTile(
                    title: Text('3 lights mode'),
                    value: is3light,
                    onChanged: (bool value) {
                      setState(() {
                        is3light = value;
                      });
                    },
                  ),
                  SizedBox(height: 16.0),
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Choose Sound',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  ListTile(
                    title: Text('Sound Set 1'),
                    leading: Radio(
                      value: 'sound_set_1',
                      groupValue: selectedSoundSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedSoundSet = value;
                        });
                      },
                    ),
                  ),
                  ListTile(
                    title: Text('Sound Set 2'),
                    leading: Radio(
                      value: 'sound_set_2',
                      groupValue: selectedSoundSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedSoundSet = value;
                        });
                      },
                    ),
                  ),
                  ListTile(
                    title: Text('Const sound'),
                    leading: Radio(
                      value: 'sound_set_3',
                      groupValue: selectedSoundSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedSoundSet = value;
                        });
                      },
                    ),
                  ),
                  SizedBox(height: 16.0),
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Choose Color',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  ListTile(
                    title: Text('Color Set 1'),
                    leading: Radio(
                      value: 'color_set_1',
                      groupValue: selectedColorSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedColorSet = value;
                        });
                      },
                    ),
                  ),
                  ListTile(
                    title: Text('Color Set 2'),
                    leading: Radio(
                      value: 'color_set_2',
                      groupValue: selectedColorSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedColorSet = value;
                        });
                      },
                    ),
                  ),
                  ListTile(
                    title: Text('Color Set 3'),
                    leading: Radio(
                      value: 'color_set_3',
                      groupValue: selectedColorSet,
                      onChanged: (String? value) {
                        setState(() {
                          selectedColorSet = value;
                        });
                      },
                    ),
                  ),
                ],
              );
            },
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                _sendSettings(isSlowMode, is3light, selectedSoundSet, selectedColorSet);
                Navigator.of(context).pop(); // Close the settings dialog
              },
              child: Text('Save Settings'),
            ),
          ],
        );
      },
    );
  }

  void _sendSettings(bool isSlowMode, bool is3light, String? selectedSoundSet, String? selectedColorSet) {
    String str = '';

    if (!isSlowMode) {
      str += 'fast_mode ';
    } else {
      str += 'slow_mode';
    }

    if (!is3light) {
      str += '4_lights';
    } else {
      str += '3_lights';
    }

    str += '$selectedSoundSet$selectedColorSet!';
    if (widget.connection.isConnected) {
      Uint8List data = Uint8List.fromList(utf8.encode(str));
      widget.connection.output.add(data);
      widget.connection.output.allSent.then((_) {
        print(str);
      });
    } else {
      print('Not connected');
    }
  }
}
